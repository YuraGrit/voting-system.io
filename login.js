
// login.js
 

// –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
const ERROR_MESSAGES = {
  EMPTY_CODE: "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ–¥!",
  INVALID_CODE: "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥!",
  SERVER_ERROR: "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è —ñ–∑ —Å–µ—Ä–≤–µ—Ä–æ–º!"
};

// –õ–æ–∫–∞–ª—å–Ω–µ —Å—Ö–æ–≤–∏—â–µ
const STORAGE_KEY = 'session_token';

// URL API
const API_BASE_URL = 'https://registration-io.onrender.com';
const API_ENDPOINTS = {
  CHECK_AUTH: `${API_BASE_URL}/check-auth`,
  LOGIN: `${API_BASE_URL}/login`,
  REGISTER: `${API_BASE_URL}/register`,
  REGISTER_BULK: `${API_BASE_URL}/register-bulk`
};

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
window.onload = function () {
  const token = localStorage.getItem(STORAGE_KEY);

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω—É
  if (token) {
    checkTokenAndRedirect(token);
  }
};

// –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
document.addEventListener('DOMContentLoaded', function() {
  const authForm = document.getElementById('auth-form');
  if (authForm) {
    authForm.addEventListener('submit', function(e) {
      e.preventDefault();
      authorize();
    });
  }
  
  // –û–±—Ä–æ–±–Ω–∏–∫–∞ –ø–æ–ª—è –≤–≤–æ–¥—É
  const authCodeInput = document.getElementById('authCode');
  if (authCodeInput) {
    authCodeInput.addEventListener('keypress', function(e) {
      if (e.key === 'Enter') {
        e.preventDefault();
        authorize();
      }
    });
  }

  // –û–±—Ä–æ–±–Ω–∏–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
  const createUsersLink = document.getElementById('createUsersLink');
  const modal = document.getElementById('createUsersModal');
  const closeModal = document.getElementById('closeModal');
  const createUsersBtn = document.getElementById('createUsersBtn');
  const copyAllCodesBtn = document.getElementById('copyAllCodes');

  if (createUsersLink) {
    createUsersLink.addEventListener('click', function() {
      modal.style.display = 'flex';
      document.getElementById('userCount').focus();
    });
  }

  if (closeModal) {
    closeModal.addEventListener('click', function() {
      modal.style.display = 'none';
      resetModal();
    });
  }

  // –ó–∞–∫—Ä–∏—Ç–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –ø—Ä–∏ –∫–ª—ñ–∫—É –∑–∞ –π–æ–≥–æ –º–µ–∂–∞–º–∏
  window.addEventListener('click', function(event) {
    if (event.target === modal) {
      modal.style.display = 'none';
      resetModal();
    }
  });

  // –û–±—Ä–æ–±–Ω–∏–∫ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
  if (createUsersBtn) {
    createUsersBtn.addEventListener('click', createUsers);
  }

  // –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ–¥—ñ–≤
  if (copyAllCodesBtn) {
    copyAllCodesBtn.addEventListener('click', copyAllCodes);
  }
});

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω—É —ñ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
 * @param {string} token
 */
async function checkTokenAndRedirect(token) {
  try {
    showLoader();
    
    const response = await fetch(API_ENDPOINTS.CHECK_AUTH, {
      method: "GET",
      headers: {
        "Authorization": `Bearer ${token}`
      }
    });

    if (response.ok) {
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
      window.location.href = "index.html";
    } else {
      // –Ø–∫—â–æ —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π, –≤–∏–¥–∞–ª—è—î–º–æ –π–æ–≥–æ
      localStorage.removeItem(STORAGE_KEY);
      hideLoader();
    }
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:", error);
    localStorage.removeItem(STORAGE_KEY);
    hideLoader();
  }
}


// –§—É–Ω–∫—Ü—ñ—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó

async function authorize() {
  const inputCode = document.getElementById("authCode").value.trim();
  const errorElement = document.getElementById("authError");

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫–æ–¥—É
  if (!inputCode) {
    showError(errorElement, ERROR_MESSAGES.EMPTY_CODE);
    return;
  }

  // –ü–æ–∫–∞–∑ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
  showLoader();

  try {
    const response = await fetch(API_ENDPOINTS.LOGIN, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ authCode: inputCode })
    });

    const data = await response.json();
    
    if (data.message === "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!" && data.token) {
      // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–µ—Å—ñ–π–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω—É
      localStorage.setItem(STORAGE_KEY, data.token);
      
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ groupId
      if (data.groupId) {
        localStorage.setItem('user_group_id', data.groupId);
      }
      
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ 
      if (data.status) {
        localStorage.setItem('user_status', data.status);
      }
      
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
      window.location.href = "index.html";
    } else {
      hideLoader();
      showError(errorElement, ERROR_MESSAGES.INVALID_CODE);
    }
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:", error);
    hideLoader();
    showError(errorElement, ERROR_MESSAGES.SERVER_ERROR);
  }
}


//–§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä—É–ø–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤

async function createUsers() {
  const userCount = parseInt(document.getElementById('userCount').value, 10);
  const createUsersBtn = document.getElementById('createUsersBtn');
  const usersListContainer = document.getElementById('usersListContainer');
  const usersList = document.getElementById('usersList');
  
  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö
  if (isNaN(userCount) || userCount < 1 || userCount > 100) {
    alert('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 100');
    return;
  }
  
  // –ü–æ–∫–∞–∑—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
  createUsersBtn.disabled = true;
  createUsersBtn.innerText = '–°—Ç–≤–æ—Ä–µ–Ω–Ω—è...';
  
  try {
    // –ó–∞–ø–∏—Ç –Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä—É–ø–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    const response = await fetch(API_ENDPOINTS.REGISTER_BULK, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ userCount })
    });
    
    if (!response.ok) {
      throw new Error('–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    }
    
    const data = await response.json();
    
    // –û—á–∏—â—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    usersList.innerHTML = '';
    
    // –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–µ—Ä—à–∏–º
    if (data.adminCode) {
      const adminItem = document.createElement('div');
      adminItem.className = 'user-code-item';
      adminItem.innerHTML = `
        <div>
          <strong>–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä</strong>
          <div class="code">${data.adminCode}</div>
        </div>
        <button class="copy-btn" data-code="${data.adminCode}" title="–ö–æ–ø—ñ—é–≤–∞—Ç–∏ –∫–æ–¥">üìã</button>
      `;
      usersList.appendChild(adminItem);
    }
    
    // –î–æ–¥–∞—î–º–æ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    data.users.forEach((user, index) => {
      const userItem = document.createElement('div');
      userItem.className = 'user-code-item';
      userItem.innerHTML = `
        <div>
          <strong>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${index + 1}</strong>
          <div class="code">${user.authCode}</div>
        </div>
        <button class="copy-btn" data-code="${user.authCode}" title="–ö–æ–ø—ñ—é–≤–∞—Ç–∏ –∫–æ–¥">üìã</button>
      `;
      usersList.appendChild(userItem);
    });
    
    // –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    usersListContainer.style.display = 'block';
    
    // –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–æ–∫ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è
    document.querySelectorAll('.copy-btn').forEach(btn => {
      btn.addEventListener('click', function() {
        const code = this.getAttribute('data-code');
        navigator.clipboard.writeText(code).then(() => {
          const originalText = this.innerHTML;
          this.innerHTML = '‚úÖ';
          
          setTimeout(() => {
            this.innerHTML = originalText;
          }, 1500);
        });
      });
    });
    
    // –ó–º—ñ–Ω–∞ —Ç–µ–∫—Å—Ç—É –∫–Ω–æ–ø–∫–∏
    createUsersBtn.innerText = '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ —Å—Ç–≤–æ—Ä–µ–Ω—ñ!';
    
    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–Ω–æ–ø–∫—É –≤ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω
    setTimeout(() => {
      createUsersBtn.innerText = '–°—Ç–≤–æ—Ä–∏—Ç–∏ —â–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤';
      createUsersBtn.disabled = false;
    }, 2000);
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:', error);
    alert('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
    createUsersBtn.innerText = '–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤';
    createUsersBtn.disabled = false;
  }
}

// –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è –∫–æ–¥—ñ–≤ –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É
function copyAllCodes() {
  const codeElements = document.querySelectorAll('.user-code-item .code');
  let allCodes = '';
  
  codeElements.forEach((codeEl, index) => {
    const roleText = index === 0 ? '–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä' : `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${index}`;
    allCodes += `${roleText}: ${codeEl.textContent}\n`;
  });
  
  navigator.clipboard.writeText(allCodes).then(() => {
    const copyAllBtn = document.getElementById('copyAllCodes');
    const originalText = copyAllBtn.innerText;
    
    copyAllBtn.innerText = '‚úÖ –°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ!';
    
    setTimeout(() => {
      copyAllBtn.innerText = originalText;
    }, 1500);
  });
}


// –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤—ñ–∫–Ω–∞ —É –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω

function resetModal() {
  document.getElementById('usersListContainer').style.display = 'none';
  document.getElementById('usersList').innerHTML = '';
  document.getElementById('createUsersBtn').innerText = '–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤';
  document.getElementById('createUsersBtn').disabled = false;
  document.getElementById('userCount').value = 3;
}

/**
 * –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
 * @param {HTMLElement} element - HTML –µ–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏
 * @param {string} message - –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
 */
function showError(element, message) {
  if (element) {
    element.innerText = message;
    element.style.display = "block";
    
    document.getElementById("authCode").focus();
  }
}


// –ü–æ–∫–∞–∑ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
function showLoader() {
  const loader = document.getElementById("loader");
  if (loader) {
    loader.style.display = "block";
  }
  
  // –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–∫—É –ø—ñ–¥ —á–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
  const loginButton = document.querySelector('#auth button');
  if (loginButton) {
    loginButton.disabled = true;
  }
}

// –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
function hideLoader() {
  const loader = document.getElementById("loader");
  if (loader) {
    loader.style.display = "none";
  }
  
  // –†–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏
  const loginButton = document.querySelector('#auth button');
  if (loginButton) {
    loginButton.disabled = false;
  }
}
